// This benchmark stresses both field and method lookup.

struct Foo {
    field0: int
    field1: int
    field2: int
    field3: int
    field4: int
    field5: int
    field6: int
    field7: int
    field8: int
    field9: int
    field10: int
    field11: int
    field12: int
    field13: int
    field14: int
    field15: int
    field16: int
    field17: int
    field18: int
    field19: int
    field20: int
    field21: int
    field22: int
    field23: int
    field24: int
    field25: int
    field26: int
    field27: int
    field28: int
    field29: int
}

fun new Foo() {
    return Foo {
        field0: 1,
        field1: 1,
        field2: 1,
        field3: 1,
        field4: 1,
        field5: 1,
        field6: 1,
        field7: 1,
        field8: 1,
        field9: 1,
        field10: 1,
        field11: 1,
        field12: 1,
        field13: 1,
        field14: 1,
        field15: 1,
        field16: 1,
        field17: 1,
        field18: 1,
        field19: 1,
        field20: 1,
        field21: 1,
        field22: 1,
        field23: 1,
        field24: 1,
        field25: 1,
        field26: 1,
        field27: 1,
        field28: 1,
        field29: 1
    }
}

fun Foo.method0() { return this.field0; }
fun Foo.method1() { return this.field1; }
fun Foo.method2() { return this.field2; }
fun Foo.method3() { return this.field3; }
fun Foo.method4() { return this.field4; }
fun Foo.method5() { return this.field5; }
fun Foo.method6() { return this.field6; }
fun Foo.method7() { return this.field7; }
fun Foo.method8() { return this.field8; }
fun Foo.method9() { return this.field9; }
fun Foo.method10() { return this.field10; }
fun Foo.method11() { return this.field11; }
fun Foo.method12() { return this.field12; }
fun Foo.method13() { return this.field13; }
fun Foo.method14() { return this.field14; }
fun Foo.method15() { return this.field15; }
fun Foo.method16() { return this.field16; }
fun Foo.method17() { return this.field17; }
fun Foo.method18() { return this.field18; }
fun Foo.method19() { return this.field19; }
fun Foo.method20() { return this.field20; }
fun Foo.method21() { return this.field21; }
fun Foo.method22() { return this.field22; }
fun Foo.method23() { return this.field23; }
fun Foo.method24() { return this.field24; }
fun Foo.method25() { return this.field25; }
fun Foo.method26() { return this.field26; }
fun Foo.method27() { return this.field27; }
fun Foo.method28() { return this.field28; }
fun Foo.method29() { return this.field29; }

var foo = Foo();
var start = clock();
var i = 0;
while (i < 500000) {
    foo.method0();
    foo.method1();
    foo.method2();
    foo.method3();
    foo.method4();
    foo.method5();
    foo.method6();
    foo.method7();
    foo.method8();
    foo.method9();
    foo.method10();
    foo.method11();
    foo.method12();
    foo.method13();
    foo.method14();
    foo.method15();
    foo.method16();
    foo.method17();
    foo.method18();
    foo.method19();
    foo.method20();
    foo.method21();
    foo.method22();
    foo.method23();
    foo.method24();
    foo.method25();
    foo.method26();
    foo.method27();
    foo.method28();
    foo.method29();
    i = i + 1;
}

print(clock() - start);
